{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","cardComponent","map","user","i","key","searchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","padding","overflow","border","height","width","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","SearchBox","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAgBeA,EAdF,SAACC,GACb,OACC,yBAAKC,UAAU,yEACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCWEC,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACvC,OACA,kBAAC,EAAD,CAAMC,IAAKD,EACXR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,WAGjB,OACC,yBAAKL,UAAU,OACbQ,ICCWK,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC/B,OACA,yBAAKf,UAAU,OACd,2BACCA,UAAU,mCACTgB,KAAK,SACNC,YAAY,gBACZC,SAAUH,MCIEI,EAXA,SAACpB,GACf,OACC,yBAAKqB,MAAO,CAACC,QAAQ,QAAUC,SAAU,SAAWC,OAAQ,kBAAoBC,OAAQ,QAAUC,MAAO,WACxG1B,EAAM2B,WCsCMC,G,wDAlCd,aAAe,IAAD,8BACb,gBAaFC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEhB,YAAae,EAAME,OAAOC,SAbzC,EAAKC,MAAQ,CACb1B,OAAQ,GACTO,YAAa,IAJC,E,gEAQO,IAAD,OACnBoB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAEvB,OAAQ+B,S,+BAO9B,IAAD,OACFC,EAAiBC,KAAKP,MAAM1B,OAAOkC,QAAO,SAAAlC,GAChD,OAAOA,EAAOH,KAAKsC,cAAcC,SAAS,EAAKV,MAAMnB,YAAY4B,kBAEjE,OACD,yBAAK1C,UAAU,MACd,wBAAIA,UAAU,MAAd,UACA,kBAAC4C,EAAD,CAAW7B,aAAgByB,KAAKZ,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUrB,OAAQgC,U,GA5BHM,c,MCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e204252e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n\treturn (\r\n\t\t<div className='tc bg-blue b--light-blue bw1 shadow-5 dib br3 ba pa3 ma2 fl w-15 grow'>\r\n\t\t\t<img alt=\"photo\" src={`https://robohash.org/${props.id}?500x500`} />\r\n\t\t<div>\r\n\t\t\t<h2>{props.name}</h2>\r\n\t\t\t<p>{props.email}</p>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t);\r\n\r\n} \r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardComponent = robots.map((user,i) => {\r\n\treturn ( \r\n\t<Card key={i} \r\n\tid={robots[i].id} \r\n\tname={robots[i].name} \r\n\temail={robots[i].email}/>)\r\n\t\r\n})\r\n\treturn (\r\n\t\t<div className=\"ph5\">\r\n\t\t\t{cardComponent}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst searchBox = ({searchfield,searchChange}) => {\r\n\treturn (\r\n\t<div className='pa2'>\r\n\t\t<input\r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t \ttype=\"search\" \r\n\t\t\tplaceholder=\"Search Robots\"\r\n\t\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default searchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{padding:'150px' , overflow: 'scroll' , border: '5px solid black' , height: '800px' , width: '1900px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\n\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from './CardList'\r\nimport SearchBox from './SearchBox'\r\nimport Scroll from './Scroll'\r\nimport './App.css'\r\n\r\n\r\n\r\nclass App extends Component {\r\n constructor() {\r\n \tsuper()\r\n \tthis.state = {\r\n \trobots: [],\r\n\tsearchfield: ''\r\n \t}\r\n }\r\n\r\n componentDidMount() {\r\n \tfetch('https://jsonplaceholder.typicode.com/users')\r\n \t.then(response => response.json())\r\n \t.then(users => this.setState({ robots: users}));\r\n }\r\n\r\nonSearchChange = (event) => {\r\n\tthis.setState({ searchfield: event.target.value})\r\n}\r\n\r\n\trender() {\r\n\t\tconst filteredRobots = this.state.robots.filter(robots =>{\r\n\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t})\r\n\t\treturn (\r\n\t<div className='tc'>\r\n\t\t<h1 className=\"f1\">Robots</h1>\r\n\t\t<SearchBox searchChange = {this.onSearchChange} />\r\n\t\t<Scroll>\r\n\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t</Scroll>\r\n\t</div>\r\n);\r\n\t}\r\n\t\t}\r\n\t\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport { robots } from './Robots'\nimport * as serviceWorker from './serviceWorker';\nimport SearchBox from './SearchBox';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}